import { PacketSerializer, Packet } from "../src/encoding";

const MESSAGE = "0x1908712362139623";
const GUID =
  "0x1234567890123456789012345678901234567890123456789012345678901234";
const PAYLOAD = (GUID + MESSAGE.slice(2)) as `0x${string}`;

const EXAMPLE_PACKET: Packet = {
  version: 1,
  nonce: 23123542n,
  guid: GUID,
  message: MESSAGE,
  payload: PAYLOAD,
  srcEid: 123,
  dstEid: 42,
  sender: "0x1234567890123456789012345678901234567890",
  receiver: "0x0987654321098765432109876543210987654321",
};

const nonce2 = 48932n;
const srcEid2 = 142;
const sender2 = "0x5B38Da6a701c568545dCfcB03FcB875f56beddC4";
const dstEid2 = 112;
const receiver2 = "0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2";
const guid2 =
  "0x51301cda94080af7ea7f0a05dde900b26f158fa1fdcde336ac2766f02ab24b1d";
const message2 =
  "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000657a322300000000000000000000000000000000000000000000000000000000000000020a080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000065a1bcd400000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad00000000000000000000000000000000000000000000000000000000657a36dc00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004192a9c7e39eff9b0de668b28983fcdab8f98841f1a0f09e8fe62531f2e79a494a72983acbb0fdb481a2d65e80e708d9995e091054b2fde843c7dcadb9121c8ef11b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000005fe09f1f0000000000000000000000000000000000000000000000182e8f37fce6e313b600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000064323d606cfcb1b50998636a182334ad97637987";
const EXAMPLE_PACKET_2_ENCODED =
  "0x01000000000000bf240000008e0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc400000070000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb251301cda94080af7ea7f0a05dde900b26f158fa1fdcde336ac2766f02ab24b1d3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000657a322300000000000000000000000000000000000000000000000000000000000000020a080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000065a1bcd400000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad00000000000000000000000000000000000000000000000000000000657a36dc00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004192a9c7e39eff9b0de668b28983fcdab8f98841f1a0f09e8fe62531f2e79a494a72983acbb0fdb481a2d65e80e708d9995e091054b2fde843c7dcadb9121c8ef11b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000005fe09f1f0000000000000000000000000000000000000000000000182e8f37fce6e313b600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000064323d606cfcb1b50998636a182334ad97637987";

const EXAMPLE_PACKET_2: Packet = {
  version: 1,
  nonce: nonce2,
  srcEid: srcEid2,
  sender: sender2,
  dstEid: dstEid2,
  receiver: receiver2,
  guid: guid2,
  message: message2,
  payload: (guid2 + message2.slice(2)) as `0x${string}`,
};
describe("Packet encoding", () => {
  test("A packet should be cyclically encodable to itself", () => {
    let serialized = PacketSerializer.serialize(EXAMPLE_PACKET);
    let deserialized = PacketSerializer.deserialize(serialized);
    expect(deserialized).toStrictEqual(EXAMPLE_PACKET);
  });

  test("Manual packet encodes to expected onchain packet bytes", () => {
    let serialized = PacketSerializer.serialize(EXAMPLE_PACKET_2);
    expect(serialized.toLowerCase()).toStrictEqual(
      EXAMPLE_PACKET_2_ENCODED.toLowerCase(),
    );
  });

  test("Onchain packet bytes decode to manual packet", () => {
    const packet = { ...EXAMPLE_PACKET_2 };
    packet.sender = packet.sender.toLowerCase() as `0x${string}`;
    packet.receiver = packet.receiver.toLowerCase() as `0x${string}`;

    let deserialized = PacketSerializer.deserialize(EXAMPLE_PACKET_2_ENCODED);
    expect(deserialized).toStrictEqual(packet);
  });

  test("Manual packet cannot be decoded if the address contains dirty bytes", () => {
    let encoded = EXAMPLE_PACKET_2_ENCODED;
    encoded = encoded.substring(0, 28) + "a" + encoded.substring(29);
    expect(() =>
      PacketSerializer.deserialize(encoded as `0x${string}`),
    ).toThrow(
      "Dirty bytes in address: 0xa000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4, is this an evm address?",
    );
  });
});
